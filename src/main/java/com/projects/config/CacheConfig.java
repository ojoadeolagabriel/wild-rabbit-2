package com.projects.config;import org.apache.commons.lang3.StringUtils;import org.springframework.cache.CacheManager;import org.springframework.cache.annotation.CachingConfigurerSupport;import org.springframework.cache.annotation.EnableCaching;import org.springframework.cache.ehcache.EhCacheCacheManager;import org.springframework.cache.ehcache.EhCacheManagerFactoryBean;import org.springframework.cache.interceptor.KeyGenerator;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.core.env.Environment;import org.springframework.core.io.ClassPathResource;import javax.inject.Inject;import java.lang.reflect.Method;/** * Created by Adeola.Ojo */@Configuration@EnableCachingpublic class CacheConfig extends CachingConfigurerSupport{    @Inject    private Environment environment;    @Bean    @Override    public CacheManager cacheManager() {        EhCacheCacheManager cacheManager = new EhCacheCacheManager();        cacheManager.setCacheManager(ehCacheManagerFactoryBean().getObject());        return cacheManager;    }    @Bean    public EhCacheManagerFactoryBean ehCacheManagerFactoryBean() {        EhCacheManagerFactoryBean ehCacheManagerFactoryBean = new EhCacheManagerFactoryBean();        ehCacheManagerFactoryBean.setConfigLocation(new ClassPathResource("ehcache.xml"));        ehCacheManagerFactoryBean.setCacheManagerName("cacheManager");        ehCacheManagerFactoryBean.setShared(true);        System.out.println("..");        return ehCacheManagerFactoryBean;    }    @Bean    @Override    public KeyGenerator keyGenerator() {        return new KeyGenerator() {            @Override            public Object generate(Object o, Method method, Object... params) {                StringBuilder sb = new StringBuilder();                sb.append(o.getClass().getName());                sb.append(method.getName());                for (Object param : params) {                    String paramKey = StringUtils.EMPTY;                    if (param == null) {                        paramKey = "null";                    } else {                        paramKey = param.toString();                    }                    sb.append(paramKey);                }                return sb.toString();            }        };    }}